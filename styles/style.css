/* p {
    color: red;
    width: 500px;
    border: 1px solid black;
  }
   */
  /* p,li,h1 {
    color: red;
  }
   */

   html {
    font-size: 20px; /* px значит 'пиксели': базовый шрифт будет 20 пикселей в высоту  */
    font-family: placeholder 'Roboto', sans-serif; /*здесь должно быть имя шрифта из Google fonts*/
  }

  h1 {
    font-size: 60px;
    text-align: center;
  }
  
  p, li {
    font-size: 16px;
    line-height: 2;
    letter-spacing: 1px;
  }
  
/* padding, пространство только вокруг контента (например, вокруг абзаца текста)
border, сплошная линия, которая расположена рядом с padding
margin, пространство вокруг внешней стороны элемента

width (ширину элемента)
background-color, цвет позади контента и padding элементов
color, цвет контента элемента (обычно текста)
text-shadow: устанавливает тень на тексте внутри элемента
display: устанавливает режим отображения элемента (пока что не волнуйтесь об этом) */
html {
    background-color: #00539F; /* изменение цвета страницы*/
  }

  body { /*изменения для тела страницы*/
    width: 600px;
    margin: 0 auto;
    background-color: #FF9500 ;
    padding: 0 20px 20px 20px;
    border: 5px solid black;
  }

  /* width: 500px; — заставляет тело быть всегда 600 пикселей в ширину.
margin: 0 auto; — когда вы устанавливаете два значения для таких свойств как margin или padding, 
                  первое значение элемента влияет на верхнюю и нижнюю сторону (делает их 0 в данном случае), 
                  и второе значение на левую и правую сторону (здесь, auto является особым значением, которое делит 
                  доступное пространство по горизонтали поровну слева и справа). Вы также можете использовать один, 
                  три или четыре значения, как описано здесь.
background-color: #FF9500; — как и прежде, устанавливает цвет фона элемента. 
padding: 0 20px 20px 20px; — у нас есть четыре значения, установленные для padding, 
                             чтобы сделать немного пространства вокруг нашего контента. 
                             В этот раз мы не устанавливаем padding на верхней части тела,  
                             но делаем 20 пикселей слева, снизу и справа. 
                             Значения устанавливаются сверху, справа, снизу, слева, в таком порядке.
border: 5px solid black; — просто устанавливает сплошную чёрную рамку шириной 5 пикселей со всех сторон тела. */

h1 { /*Позиционирование и стилизация нашего заголовка главной страницы*/
    margin: 0;
    padding: 20px 0;
    color: #00539F;
    text-shadow: 3px 3px 1px black;
  }
  
  /*Вы, возможно, заметили, что есть ужасный разрыв в верхней части тела. Это происходит, потому что браузеры применяют некоторый стиль по умолчанию для элемента <h1> (en-US) (по сравнению с другими), даже если вы не применяли какой-либо CSS вообще! Это может звучать как плохая идея, но мы хотим, чтобы веб-страница без стилей имела базовую читаемость. Чтобы избавиться от разрыва, мы переопределили стиль по умолчанию, установив margin: 0;.

  Затем мы установили заголовку верхний и нижний padding на 20 пикселей, и сделали текст заголовка того же цвета, как и цвет фона html.
  
  Здесь, мы использовали одно довольно интересное свойство - это text-shadow, которое применяет тень к текстовому контенту элемента. Оно имеет следующие четыре значения:
  
  Первое значение пикселей задаёт горизонтальное смещение тени от текста — как далеко она движется поперёк: отрицательное значение должно двигать её влево.
  Второе значение пикселей задаёт вертикальное смещение тени от текста — как далеко она движется вниз, в этом примере: отрицательное значение должно переместить её вверх.
  Третье значение пикселей задаёт радиус размытия тени — большее значение будет означать более размытую тень.
  Четвёртое значение задаёт основной цвет тени.
  И вновь попробуйте поэкспериментировать с различными значениями, чтобы посмотреть, что вы можете придумать.*/

  img { /*центрирование изображения*/
    display: block;
    margin: 0 auto;
    width: 200px;
  }
  /*В заключение, мы отцентрируем изображение, чтобы оно лучше выглядело. 
  Мы можем использовать margin: 0 auto уловку снова, как мы это делали раньше для body,
   но мы также должны сделать кое-что ещё. Элемент <body> является блочным, это значит, 
   что он занимает всю ширину страницы и может иметь margin и другие значения отступов, применяемых к нему.
    Изображения, наоборот, являются строчными элементами, то есть они этого не могут. 
    Таким образом, чтобы применить margin к изображению, 
    мы должны дать изображению блочное поведение с помощью display: block;.

    Примечание: Приведённые выше инструкции предполагают, 
    что вы используете изображение меньшей ширины, чем заданная для <body> (600px). 
    Если ваше изображение больше, тогда оно выйдет за границы <body> и займёт пространство страницы. 
    Чтобы исправить это, вы можете: 1) уменьши ширину изображения используя графический редактор, или 
    2) изменить размер изображения используя CSS путём установки свойства width для <img> меньше, чем у <body>.*/